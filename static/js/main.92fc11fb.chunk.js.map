{"version":3,"sources":["assets/red-marker.png","components/Header.jsx","components/MapComponent.jsx","components/Filter.jsx","App.js","index.js"],"names":["module","exports","Header","className","href","Component","MapComponent","customIcon","Icon","iconUrl","require","iconSize","quakeFeaturesMarker","this","props","quakes","map","quake","position","magnitude","Marker","key","id","icon","Popup","Date","time","toUTCString","place","url","Map","center","zoom","minZoom","maxBounds","scrollWheelZoom","attributionControl","TileLayer","AttributionControl","prefix","Filter","state","filterIsOpenAddDisplayClass","magnitudeFilter","timeFilter","toggleFilter","bind","magnitudeChangeHandler","setState","event","target","value","prevProps","prevState","fetchFilterData","filter_sec_class_list","push","onClick","join","Form","FormGroup","CustomInput","type","name","label","checked","parseInt","onChange","parseFloat","defaultChecked","disabled","App","fetchDataFromFilterJsx","data","isLoaded","filteredData","defaultEarthquakesData","filter","filterData","serverNotConnectedMsg","axios","get","then","res","selectedData","features","properties","mag","alert","code","geometry","coordinates","catch","error","console","log","mapSection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92fc11fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red-marker.6ce3ca72.png\";","import React, { Component } from 'react'\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"quake_header\">\r\n                <h1 className=\"navbar__h1\">QuakeTracker</h1>\r\n                <p className=\"navbar__p\">Visualize the Earthquake in Real-Time<br/><span className=\"nav-followlnk-span\"><a href=\"https://purveshmakode.com\">{`</>`} w/ &#10084; by PM</a></span></p>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport { Map, TileLayer, Marker, Popup, AttributionControl } from 'react-leaflet';\r\n\r\nimport { Icon } from \"leaflet\";\r\n\r\n\r\n\r\nclass MapComponent extends Component {\r\n\r\n  render() {\r\n\r\n    const customIcon = new Icon({\r\n      iconUrl: require('../assets/red-marker.png'),     // red-marker for severe alert\r\n      iconSize: [30, 41]\r\n    });\r\n\r\n\r\n    const quakeFeaturesMarker = this.props.quakes.map(quake => {\r\n      const position = [quake.position[1], quake.position[0]];    // react-leaflet coordinate position format is [lat, lng]\r\n      if (quake.magnitude >= 6) {\r\n        return (\r\n          <Marker key={quake.id} position={position} icon={customIcon}>\r\n            <Popup>\r\n              <span className=\"popup__quaketime\">{new Date(quake.time).toUTCString()}</span>\r\n              <br />\r\n              <span className=\"quake__magnitude__red\">{quake.magnitude}</span> magnitude earthquake. Near {quake.place}.\r\n            Find more details <a href={quake.url}>here</a>\r\n            </Popup>\r\n          </Marker>\r\n        );\r\n      } else {\r\n        return (\r\n          <Marker key={quake.id} position={position} >\r\n            <Popup>\r\n              <span className=\"popup__quaketime\">{new Date(quake.time).toUTCString()}</span>\r\n              <br />\r\n              <span className=\"quake__magnitude\">{quake.magnitude}</span> magnitude earthquake. Near {quake.place}.\r\n              Find more details <a href={quake.url}>here</a>\r\n            </Popup>\r\n          </Marker>\r\n        );\r\n      }\r\n    });\r\n\r\n\r\n    return (\r\n      <Map\r\n        className=\"map__section\"\r\n        center={[38, 6]}\r\n        zoom={3}\r\n        minZoom=\"2.5\"\r\n        maxBounds={[\r\n          [90, 180],\r\n          [-90, -180],\r\n        ]}\r\n        scrollWheelZoom={false}\r\n        attributionControl={false}\r\n      >\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        <AttributionControl prefix=\"<a href='https://purveshmakode.com'>Purvesh Makode</a>\" />\r\n        {quakeFeaturesMarker}\r\n      </Map >\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default MapComponent;","import React, { Component } from 'react';\r\nimport { Form, FormGroup, CustomInput } from 'reactstrap';\r\n\r\nclass Filter extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filterIsOpenAddDisplayClass: false,\r\n            magnitudeFilter: -1,\r\n            timeFilter: null,\r\n        }\r\n\r\n        this.toggleFilter = this.toggleFilter.bind(this);\r\n        this.magnitudeChangeHandler = this.magnitudeChangeHandler.bind(this);\r\n\r\n    }\r\n\r\n\r\n    toggleFilter() {\r\n        this.setState({\r\n            filterIsOpenAddDisplayClass: !this.state.filterIsOpenAddDisplayClass\r\n        });\r\n    }\r\n\r\n\r\n    magnitudeChangeHandler(event) {\r\n        // console.log(\"Filter Touch:\", this.state.magnitudeFilter);\r\n        this.setState({\r\n            magnitudeFilter: event.target.value\r\n        });\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {   // This life cycle method is used to pass state data into parent component (App.js)\r\n        if (this.state.magnitudeFilter !== prevState.magnitudeFilter) {\r\n            this.props.fetchFilterData(this.state);\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let filter_sec_class_list = [\"filter_sec\"];\r\n        if (!this.state.filterIsOpenAddDisplayClass) {\r\n            filter_sec_class_list.push('display_none');\r\n        }\r\n\r\n        // console.log(\"gives mag in string (got to convert it into Int)\", this.state.magnitudeFilter);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"toggle__filter\" onClick={this.toggleFilter}>\r\n                    Filter\r\n                </div>\r\n                <div className={filter_sec_class_list.join(' ')}>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <CustomInput type=\"radio\" id=\"magGreaterThan0\" name=\"mag\" value={-1} label=\"All\" checked={parseInt(this.state.magnitudeFilter, 10) === -1} onChange={this.magnitudeChangeHandler} />\r\n                            <CustomInput type=\"radio\" id=\"magGreaterThan3\" name=\"mag\" value={3.5} label=\"Maginitude > 3.5\" checked={parseFloat(this.state.magnitudeFilter) === 3.5} onChange={this.magnitudeChangeHandler} />\r\n                            <CustomInput type=\"radio\" id=\"magGreaterThan6\" name=\"mag\" value={6} label=\"Maginitude > 6\" checked={parseInt(this.state.magnitudeFilter, 10) === 6} onChange={this.magnitudeChangeHandler} />\r\n                        </FormGroup>\r\n                        <hr />\r\n                    </Form>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            {/* <Label className=\"filter__header\" for=\"exampleCheckbox\">Filter</Label> */}\r\n                            <CustomInput type=\"radio\" id=\"last2days\" name=\"customRadio\" defaultChecked label=\"Last 30 Hours (≈ 2 days)\" disabled />\r\n                            {/* <CustomInput type=\"radio\" id=\"last10days\" name=\"customRadio\" label=\"Last 10 days\" disabled />\r\n                            <CustomInput type=\"radio\" id=\"last30days\" name=\"customRadio\" label=\"Last 30 days\" disabled /> */}\r\n                            <hr />\r\n                            <p className=\"filter__sec__notice\">*defaults to 'last 30 hours (≈ 2 days)' <br />*defaults to 'All' magnitude <br />📍 Earthquakes with &gt;6 magnitude</p>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filter;","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport './App.css';\r\n\r\nimport Header from './components/Header';\r\nimport MapComponent from './components/MapComponent';\r\nimport Filter from './components/Filter';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      defaultEarthquakesData: [],  // [{}, {}, {},----]\r\n      filterData: '',\r\n      serverNotConnectedMsg: '',\r\n      isLoaded: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get(`https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&limit=500`)\r\n      .then(res => {\r\n        // console.log(res.data.features);    ////---> returns whole features array from JSON api data\r\n\r\n        // this.setState({\r\n        //   features: res.data.features      ////---> other and direct way to take and set whole features array and pass the 'features' as a props into MapComponent'.\r\n        // });\r\n\r\n\r\n        ////----> Below selectedData is a selected properties from a whole json data which returns a dictionary of each quake   \r\n\r\n        const selectedData = res.data.features.map(quake => {\r\n          return {\r\n            magnitude: quake.properties.mag,\r\n            place: quake.properties.place,\r\n            url: quake.properties.url,\r\n            time: quake.properties.time,\r\n            alert: quake.properties.alert,\r\n            code: quake.properties.code,\r\n            position: [\r\n              quake.geometry.coordinates[0], //longitude\r\n              quake.geometry.coordinates[1], //latitude\r\n              quake.geometry.coordinates[2], //depth\r\n            ],\r\n            id: quake.id,\r\n          }\r\n        });\r\n\r\n        // console.log(\"Selected Data:\", selectedData);\r\n        // console.log(\"Selected Data length:\", selectedData.length);\r\n\r\n\r\n\r\n        this.setState({\r\n          defaultEarthquakesData: selectedData,\r\n          isLoaded: true\r\n        });\r\n\r\n        // console.log(this.state.defaultEarthquakesData);\r\n        // console.log(this.state.filterData);\r\n\r\n      })\r\n      .catch(error => {\r\n        this.setState({ serverNotConnectedMsg: \"Can't fetch data at this moment. Check your internet connection and try again.\", isLoaded: 'true' });\r\n        console.log(error);\r\n        alert(\"We couldn't reach our servers. You may not be connected to internet. Please try again...\");\r\n      })\r\n  }\r\n\r\n\r\n  // state data from child component (Filter.jsx)\r\n  fetchDataFromFilterJsx = (data) => {\r\n    this.setState({ isLoaded: false }, () => {\r\n      // console.log(\"Passed filter Data from Child(Filter.jsx) to Parent(App.js):\", data.magnitudeFilter);\r\n\r\n      const filteredData = this.state.defaultEarthquakesData.filter(quake => quake.magnitude > data.magnitudeFilter);\r\n      // console.log(\"filterData:\", filteredData);\r\n\r\n      this.setState({\r\n        filterData: filteredData,\r\n        isLoaded: true\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let mapSection;\r\n\r\n    if (!this.state.isLoaded) {\r\n      mapSection = <p className=\"preload_message\">Loading...</p>;\r\n    } else if (this.state.serverNotConnectedMsg) {\r\n      mapSection = <p className=\"preload_message\">{this.state.serverNotConnectedMsg}</p>;\r\n    } else {\r\n      if (this.state.filterData) {\r\n        mapSection = <MapComponent quakes={this.state.filterData} />;\r\n        console.log(\"filtered quake data executed\");\r\n      } else {\r\n        console.log(\"default quake data executed\");\r\n        mapSection = <MapComponent quakes={this.state.defaultEarthquakesData} />;\r\n\r\n      }\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Filter fetchFilterData={this.fetchDataFromFilterJsx} />\r\n        <div className=\"map__section\">\r\n          {mapSection}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}